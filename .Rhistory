model
#prediksi data tes
prd1 <- predict(model, newdata = test)
rmse <- sqrt(mean((prd1 - test$pengeluaran)^2))
print(paste0("RMSE: ", rmse))
#model untuk prediksi k=100
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
rmse <- sqrt(mean((prd2 - test$pengeluaran)^2))
print(paste0("RMSE: ", rmse))
#model untuk prediksi k=100
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
library(readxl) #mengaktifkan packege xlsx
datamhs = read_xlsx("dataGame.xlsx")
str(datamhs)
library(ISLR2)
dim(datamhs)
summary(datamhs)
#UBAH MENJADI LOGICAL / FACTOR
datamhs$jk <- as.factor(datamhs$jk)
datamhs$platform_game <- as.factor(datamhs$platform_game)
str(datamhs)
summary(datamhs)
#KOSONGKAN ATAU HAPUS KOLOM YANG TIDAK MENGANDUNG NUMERIK
datamhs$nama<-NULL
datamhs$nama_game<-NULL
pairs(datamhs)
#View(datamhs)
#Buat model regresi logistik
model<- glm(platform_game ~ usia + semester,data = datamhs,family = "binomial")
summary(model)
#LAKUKAN PENGACAKAN DATA
set.seed(1)
#BAGI DATA MENJADI DUA (TRAINING 50% DAN SAMPLING 50%)
train = sample(dim(datamhs)[1], dim(datamhs)[1]*0.50)
test = datamhs[-train, ]
#BUAT MODEL 2 MENGGUNAKAN DATA TRAINING
model2 = glm(platform_game ~ usia + semester, data = datamhs, family = binomial, subset = train)
#Obtain a prediction of default status for each individual in the validation set by computing the posterior probability of default
#for that individual, and classifying the individual to the default category if the posterior probability is greater than 0.5.
log.prob_def = predict(model2, test, type = "response")
log.pred_def = rep("mobile", dim(datamhs)[1]*0.50)
log.pred_def[log.prob_def > 0.5] = "PC"
table(log.pred_def, test$platform_game)
#MENCARI NILAI ERROR
mean(log.pred_def == test$platform_game)
#PENGULANGAN 1
#LAKUKAN PENGACAKAN DATA
set.seed(303)
#BAGI DATA MENJADI DUA (TRAINING 50% DAN SAMPLING 50%)
train = sample(dim(datamhs)[1], dim(datamhs)[1]*0.50)
test = datamhs[-train, ]
#BUAT MODEL 2 MENGGUNAKAN DATA TRAINING
model2 = glm(platform_game ~ usia + semester, data = datamhs, family = binomial, subset = train)
#Obtain a prediction of default status for each individual in the validation set by computing the posterior probability of default
#for that individual, and classifying the individual to the default category if the posterior probability is greater than 0.5.
log.prob_def = predict(model2, test, type = "response")
log.pred_def = rep("mobile", dim(datamhs)[1]*0.50)
log.pred_def[log.prob_def > 0.5] = "PC"
table(log.pred_def, test$platform_game)
#MENCARI NILAI ERROR
mean(log.pred_def == test$platform_game)
#PENGULANGAN 2
#LAKUKAN PENGACAKAN DATA
set.seed(607)
#BAGI DATA MENJADI DUA (TRAINING 50% DAN SAMPLING 50%)
train = sample(dim(datamhs)[1], dim(datamhs)[1]*0.50)
test = datamhs[-train, ]
#BUAT MODEL 2 MENGGUNAKAN DATA TRAINING
model2 = glm(platform_game ~ usia + semester, data = datamhs, family = binomial, subset = train)
#Obtain a prediction of default status for each individual in the validation set by computing the posterior probability of default
#for that individual, and classifying the individual to the default category if the posterior probability is greater than 0.5.
log.prob_def = predict(model2, test, type = "response")
log.pred_def = rep("mobile", dim(datamhs)[1]*0.50)
log.pred_def[log.prob_def > 0.5] = "PC"
table(log.pred_def, test$platform_game)
#MENCARI NILAI ERROR
mean(log.pred_def == test$platform_game)
#PENGULANGAN 3
#LAKUKAN PENGACAKAN DATA
set.seed(12345)
#BAGI DATA MENJADI DUA (TRAINING 50% DAN SAMPLING 50%)
train = sample(dim(datamhs)[1], dim(datamhs)[1]*0.50)
test = datamhs[-train, ]
#BUAT MODEL 2 MENGGUNAKAN DATA TRAINING
model2 = glm(platform_game ~ usia + semester, data = datamhs, family = binomial, subset = train)
#Obtain a prediction of default status for each individual in the validation set by computing the posterior probability of default
#for that individual, and classifying the individual to the default category if the posterior probability is greater than 0.5.
log.prob_def = predict(model2, test, type = "response")
log.pred_def = rep("mobile", dim(datamhs)[1]*0.50)
log.pred_def[log.prob_def > 0.5] = "PC"
table(log.pred_def, test$platform_game)
#MENCARI NILAI ERROR
mean(log.pred_def == test$platform_game)
modl <- train(pengeluaran ~waktu_main + usia, data = train, method = "lm", trControl = ctrl)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
library(readxl)
library(tidyverse)
library(caret)
datamhs = read_xlsx("dataGame.xlsx")
attach(datamhs)
set.seed(1)
#membagi menjadi data training dan data tes
smp = sample(c(TRUE, FALSE), nrow(datamhs), replace=TRUE, prob=c(0.7,0.3))
train = datamhs[smp, ]
test = datamhs[!smp, ]
#membuat model untuk prediksi data tes
ctrl = trainControl(method = "cv", number = 10)
model = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl)
model
#prediksi data tes
prd1 <- predict(model, test)
#mencari nilai eror
SSE = sum((prd1 - test$pengeluaran)^2)
SST = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE/SST #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE/nrow(test)) #RMSE
RMSE # = 135424.5
#model untuk prediksi k=100
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
#mencari nilai eror
SSE2 = sum((prd2 - test$pengeluaran)^2)
SST2 = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE2/SST2 #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE2/nrow(test)) #RMSE
RMSE # = 135424.5
library(readxl) #mengaktifkan packege xlsx
datamhs = read_xlsx("dataGame.xlsx")
str(datamhs)
library(ISLR2)
dim(datamhs)
summary(datamhs)
#UBAH MENJADI LOGICAL / FACTOR
datamhs$jk <- as.factor(datamhs$jk)
datamhs$platform_game <- as.factor(datamhs$platform_game)
str(datamhs)
summary(datamhs)
#KOSONGKAN ATAU HAPUS KOLOM YANG TIDAK MENGANDUNG NUMERIK
datamhs$nama<-NULL
datamhs$nama_game<-NULL
pairs(datamhs)
#View(datamhs)
#Buat model regresi logistik
model<- glm(platform_game ~ usia + semester,data = datamhs,family = "binomial")
summary(model)
#LAKUKAN PENGACAKAN DATA
set.seed(1)
#BAGI DATA MENJADI DUA (TRAINING 50% DAN SAMPLING 50%)
train = sample(dim(datamhs)[1], dim(datamhs)[1]*0.50)
test = datamhs[-train, ]
#BUAT MODEL 2 MENGGUNAKAN DATA TRAINING
model2 = glm(platform_game ~ usia + semester, data = datamhs, family = binomial, subset = train)
#MENENTUKAN NILAI PREDIKSI DAN MENGUBAH SEMUA DATA MENJADI KATEGORI MOBILE DAN MENGUBAHNYA LAGI MENJADI KATEGORI PC
#APABILA NILAI PREDIKSINYA LEBIH DARI 0.5
log.prob_def = predict(model2, test, type = "response")
log.pred_def = rep("mobile", dim(datamhs)[1]*0.50)
log.pred_def[log.prob_def > 0.5] = "PC"
table(log.pred_def, test$platform_game)
#MENCARI NILAI ERROR
mean(log.pred_def == test$platform_game)
mean(log.pred_def != test$platform_game)
set.seed(303)
#BAGI DATA MENJADI DUA (TRAINING 50% DAN SAMPLING 50%)
train1 = sample(dim(datamhs)[1], dim(datamhs)[1]*0.50)
test1 = datamhs[-train, ]
#BUAT MODEL 2 MENGGUNAKAN DATA TRAINING
model2 = glm(platform_game ~ usia + semester, data = datamhs, family = binomial, subset = train1)
#Obtain a prediction of default status for each individual in the validation set by computing the posterior probability of default
#for that individual, and classifying the individual to the default category if the posterior probability is greater than 0.5.
log.prob_def1 = predict(model2, test1, type = "response")
log.pred_def1 = rep("mobile", dim(datamhs)[1]*0.50)
log.pred_def1[log.prob_def > 0.5] = "PC"
table(log.pred_def1, test1$platform_game)
#MENCARI NILAI ERROR
mean(log.pred_def1 == test$platform_game)
mean(log.pred_def1 != test$platform_game)
set.seed(303)
#BAGI DATA MENJADI DUA (TRAINING 50% DAN SAMPLING 50%)
train = sample(dim(datamhs)[1], dim(datamhs)[1]*0.50)
test = datamhs[-train, ]
#BUAT MODEL 2 MENGGUNAKAN DATA TRAINING
model2 = glm(platform_game ~ usia + semester, data = datamhs, family = binomial, subset = train)
#Obtain a prediction of default status for each individual in the validation set by computing the posterior probability of default
#for that individual, and classifying the individual to the default category if the posterior probability is greater than 0.5.
log.prob_def = predict(model2, test, type = "response")
log.pred_def = rep("mobile", dim(datamhs)[1]*0.50)
log.pred_def[log.prob_def > 0.5] = "PC"
table(log.pred_def, test$platform_game)
#MENCARI NILAI ERROR
mean(log.pred_def == test$platform_game)
mean(log.pred_def != test$platform_game)
#PENGULANGAN 2
#LAKUKAN PENGACAKAN DATA
set.seed(607)
#BAGI DATA MENJADI DUA (TRAINING 50% DAN SAMPLING 50%)
train = sample(dim(datamhs)[1], dim(datamhs)[1]*0.50)
test = datamhs[-train, ]
#BUAT MODEL 2 MENGGUNAKAN DATA TRAINING
model2 = glm(platform_game ~ usia + semester, data = datamhs, family = binomial, subset = train)
#Obtain a prediction of default status for each individual in the validation set by computing the posterior probability of default
#for that individual, and classifying the individual to the default category if the posterior probability is greater than 0.5.
log.prob_def = predict(model2, test, type = "response")
log.pred_def = rep("mobile", dim(datamhs)[1]*0.50)
log.pred_def[log.prob_def > 0.5] = "PC"
table(log.pred_def, test$platform_game)
#MENCARI NILAI ERROR
mean(log.pred_def == test$platform_game)
mean(log.pred_def != test$platform_game)
#PENGULANGAN 3
#LAKUKAN PENGACAKAN DATA
set.seed(12345)
#BAGI DATA MENJADI DUA (TRAINING 50% DAN SAMPLING 50%)
train = sample(dim(datamhs)[1], dim(datamhs)[1]*0.50)
test = datamhs[-train, ]
#BUAT MODEL 2 MENGGUNAKAN DATA TRAINING
model2 = glm(platform_game ~ usia + semester, data = datamhs, family = binomial, subset = train)
#Obtain a prediction of default status for each individual in the validation set by computing the posterior probability of default
#for that individual, and classifying the individual to the default category if the posterior probability is greater than 0.5.
log.prob_def = predict(model2, test, type = "response")
log.pred_def = rep("mobile", dim(datamhs)[1]*0.50)
log.pred_def[log.prob_def > 0.5] = "PC"
table(log.pred_def, test$platform_game)
#MENCARI NILAI ERROR
mean(log.pred_def == test$platform_game)
mean(log.pred_def != test$platform_game)
library(readxl) #mengaktifkan packege xlsx
datamhs = read_xlsx("dataGame.xlsx")
library(ISLR2)
# Bagi data menjadi dua, training 70% dan testing 30%
smp = sample(c(TRUE, FALSE), nrow(datamhs), replace=TRUE, prob=c(0.7,0.3))
train = datamhs[smp, ]
test = datamhs[!smp, ]
test
library(caret)
#MELAKUKAN PREDIKSI
ctrl <- trainControl(method = "LOOCV")
modl <- train(pengeluaran ~waktu_main + usia, data = train, method = "lm", trControl = ctrl)
prd1 <- predict(modl,test)
SSE = sum((prd1 - test$pengeluaran)^2) #ERROR
SST = sum((mean(train$pengeluaran) - test$pengeluaran)^2) #TOTAL
R2 = 1 - SSE/SST #RSquared
R2 #NILAI BERUBAH SETIAP DI RUN
RMSE = sqrt(SSE/nrow(test)) #RMSE
RMSE  #NILAI BERUBAH SETIAP DI RUN
library(readxl)
library(tidyverse)
library(caret)
datamhs = read_xlsx("dataGame.xlsx")
attach(datamhs)
set.seed(1)
#membagi menjadi data training dan data tes
smp = sample(c(TRUE, FALSE), nrow(datamhs), replace=TRUE, prob=c(0.7,0.3))
train = datamhs[smp, ]
test = datamhs[!smp, ]
#membuat model untuk prediksi data tes
ctrl = trainControl(method = "cv", number = 10)
model = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl)
model
#prediksi data tes
prd1 <- predict(model, test)
#mencari nilai eror
SSE = sum((prd1 - test$pengeluaran)^2)
SST = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE/SST #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE/nrow(test)) #RMSE
RMSE # = 135424.5
#model untuk prediksi k=100
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
#mencari nilai eror
SSE2 = sum((prd2 - test$pengeluaran)^2)
SST2 = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE2/SST2 #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE2/nrow(test)) #RMSE
RMSE # = 135424.5
library(readxl)
library(tidyverse)
library(caret)
datamhs = read_xlsx("dataGame.xlsx")
attach(datamhs)
set.seed(1)
#membagi menjadi data training dan data tes
smp = sample(c(TRUE, FALSE), nrow(datamhs), replace=TRUE, prob=c(0.7,0.3))
train = datamhs[smp, ]
test = datamhs[!smp, ]
#membuat model untuk prediksi data tes
ctrl = trainControl(method = "cv", number = 10)
model = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl)
model
#prediksi data tes
prd1 <- predict(model, test)
#mencari nilai eror
SSE = sum((prd1 - test$pengeluaran)^2)
SST = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE/SST #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE/nrow(test)) #RMSE
RMSE # = 135424.5
#model untuk prediksi k=100
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
#mencari nilai eror
SSE2 = sum((prd2 - test$pengeluaran)^2)
SST2 = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE2/SST2 #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE2/nrow(test)) #RMSE
RMSE # = 135424.5
library(readxl)
library(tidyverse)
library(caret)
datamhs = read_xlsx("dataGame.xlsx")
attach(datamhs)
set.seed(1)
#membagi menjadi data training dan data tes
smp = sample(c(TRUE, FALSE), nrow(datamhs), replace=TRUE, prob=c(0.7,0.3))
train = datamhs[smp, ]
test = datamhs[!smp, ]
#membuat model untuk prediksi data tes
ctrl = trainControl(method = "cv", number = 10)
model = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl)
model
#prediksi data tes
prd1 <- predict(model, test)
#mencari nilai eror
SSE = sum((prd1 - test$pengeluaran)^2)
SST = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE/SST #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE/nrow(test)) #RMSE
RMSE # = 135424.5
#model untuk prediksi k=100
set.seed(303)
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
#mencari nilai eror
SSE2 = sum((prd2 - test$pengeluaran)^2)
SST2 = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE2/SST2 #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE2/nrow(test)) #RMSE
RMSE # = 135424.5
#model untuk prediksi k=100
set.seed(303)
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
#mencari nilai eror
SSE2 = sum((prd2 - test$pengeluaran)^2)
SST2 = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE2/SST2 #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE2/nrow(test)) #RMSE
RMSE # = 135424.5
#model untuk prediksi k=100
set.seed(123)
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
#mencari nilai eror
SSE2 = sum((prd2 - test$pengeluaran)^2)
SST2 = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE2/SST2 #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE2/nrow(test)) #RMSE
RMSE # = 135424.5
#model untuk prediksi k=100
set.seed(100)
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
#mencari nilai eror
SSE2 = sum((prd2 - test$pengeluaran)^2)
SST2 = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE2/SST2 #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE2/nrow(test)) #RMSE
RMSE # = 135424.5
attach(datamhs)
set.seed(123)
#membagi menjadi data training dan data tes
smp = sample(c(TRUE, FALSE), nrow(datamhs), replace=TRUE, prob=c(0.7,0.3))
train = datamhs[smp, ]
test = datamhs[!smp, ]
#membuat model untuk prediksi data tes
ctrl = trainControl(method = "cv", number = 10)
model = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl)
model
#prediksi data tes
prd1 <- predict(model, test)
#mencari nilai eror
SSE = sum((prd1 - test$pengeluaran)^2)
SST = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE/SST #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE/nrow(test)) #RMSE
RMSE # = 135424.5
#model untuk prediksi k=100
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
#mencari nilai eror
SSE2 = sum((prd2 - test$pengeluaran)^2)
SST2 = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE2/SST2 #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE2/nrow(test)) #RMSE
RMSE # = 135424.5
library(readxl)
library(tidyverse)
library(caret)
datamhs = read_xlsx("dataGame.xlsx")
attach(datamhs)
set.seed(1)
#membagi menjadi data training dan data tes
smp = sample(c(TRUE, FALSE), nrow(datamhs), replace=TRUE, prob=c(0.7,0.3))
train = datamhs[smp, ]
test = datamhs[!smp, ]
#membuat model untuk prediksi data tes
ctrl = trainControl(method = "cv", number = 10)
model = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl)
model
#prediksi data tes
prd1 <- predict(model, test)
#mencari nilai eror
SSE = sum((prd1 - test$pengeluaran)^2)
SST = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE/SST #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE/nrow(test)) #RMSE
RMSE # = 135424.5
#model untuk prediksi k=100
ctrl2 = trainControl(method = "cv", number = 100)
model2 = train(pengeluaran~waktu_main+usia, data = train, method = "lm", trControl = ctrl2)
model2
#prediksi data tes
prd2 <- predict(model2, test)
#mencari nilai eror
SSE2 = sum((prd2 - test$pengeluaran)^2)
SST2 = sum((mean(train$pengeluaran) - test$pengeluaran)^2)
R2 = 1 - SSE2/SST2 #RSquared
R2 # = 0.2647525
RMSE = sqrt(SSE2/nrow(test)) #RMSE
RMSE # = 135424.5
library(readxl) #mengaktifkan packege xlsx
datamhs = read_xlsx("dataGame.xlsx")
str(datamhs)
library(ISLR2)
dim(datamhs)
summary(datamhs)
#UBAH MENJADI LOGICAL / FACTOR
datamhs$jk <- as.factor(datamhs$jk)
datamhs$platform_game <- as.factor(datamhs$platform_game)
str(datamhs)
summary(datamhs)
#KOSONGKAN ATAU HAPUS KOLOM YANG TIDAK MENGANDUNG NUMERIK
datamhs$nama<-NULL
datamhs$nama_game<-NULL
pairs(datamhs)
#View(datamhs)
#Buat model regresi logistik
model<- glm(platform_game ~ usia + semester,data = datamhs,family = "binomial")
summary(model)
#LAKUKAN PENGACAKAN DATA
set.seed(1)
#BAGI DATA MENJADI DUA (TRAINING 50% DAN SAMPLING 50%)
train = sample(dim(datamhs)[1], dim(datamhs)[1]*0.50)
test = datamhs[-train, ]
#BUAT MODEL 2 MENGGUNAKAN DATA TRAINING
model2 = glm(platform_game ~ usia + semester, data = datamhs, family = binomial, subset = train)
#MENENTUKAN NILAI PREDIKSI DAN MENGUBAH SEMUA DATA MENJADI KATEGORI MOBILE DAN MENGUBAHNYA LAGI MENJADI KATEGORI PC
#APABILA NILAI PREDIKSINYA LEBIH DARI 0.5
log.prob_def = predict(model2, test, type = "response")
log.pred_def = rep("mobile", dim(datamhs)[1]*0.50)
log.pred_def[log.prob_def > 0.5] = "PC"
table(log.pred_def, test$platform_game)
#MENCARI NILAI ERROR
mean(log.pred_def == test$platform_game)
getwd()
